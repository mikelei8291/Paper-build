name: Update
on:
  schedule:
    # Runs at 00:30, 06:30, 12:30 and 18:30 UTC every day
    - cron: "30 0/6 * * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      # Paper build number of the current release of this repository
      current_build: ${{ steps.data.outputs.current_build }}
      # Minecraft version of the latest Paper build
      mc_version: ${{ steps.data.outputs.mc_version }}
      # Build number of the latest Paper build
      build: ${{ steps.data.outputs.build }}
      # Release channel of the latest Paper build
      channel: ${{ steps.data.outputs.channel }}
      # Commit hash of the latest Paper build
      commit: ${{ steps.data.outputs.commit }}
      # Minecraft version of this new release of this repository
      target_version: ${{ steps.data.outputs.target_version }}
    steps:
      - name: Install fish Shell
        uses: fish-actions/install-fish@v1.1.0
      - name: Update Build Data
        id: data
        shell: fish {0}
        run: |
          function _get_paper_build_data -a index
              test -z "$index"
              and set -l index -1
              set -l version_group (curl -sLf https://api.papermc.io/v2/projects/paper | jq -re '.version_groups['$index']') || exit 1
              curl -sLf https://api.papermc.io/v2/projects/paper/version_group/$version_group/builds | jq -rec '.builds[-1] // empty'
          end
          set -l build_data (_get_paper_build_data || _get_paper_build_data -2) || exit 1
          set -l mc_version (echo $build_data | jq -r '.version')
          set -l current_tag (curl -sLf $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/latest | jq -re '.tag_name') || exit 1
          set -l current_version (string split -f1 - $current_tag)
          test "$(string match -r '^\d+\.\d+' "$mc_version")" = "$(string match -r '^\d+\.\d+' "$current_version")"
          and set -l current_build (string split -f2 - $current_tag)
          or set -l current_build -1
          echo "current_build=$current_build
          mc_version=$mc_version
          build=$(echo $build_data | jq -r '.build')
          channel=$(echo $build_data | jq -r '.channel')
          commit=$(echo $build_data | jq -r '.changes[0].commit')
          target_version=$(echo -e "$current_version\n$mc_version" | sort -rV | head -1)" >> "$GITHUB_OUTPUT"
          string replace -a "=" ": " < "$GITHUB_OUTPUT"
  release:
    needs: update
    if: >-
      needs.update.outputs.channel == 'default'
      && needs.update.outputs.commit != 'null'
      && needs.update.outputs.mc_version == needs.update.outputs.target_version
      && fromJSON(needs.update.outputs.build) > fromJSON(needs.update.outputs.current_build)
    uses: mikelei8291/Paper-build/.github/workflows/release.yml@master
    with:
      mc_version: ${{ needs.update.outputs.mc_version }}
      build: ${{ needs.update.outputs.build }}
      current_build: ${{ needs.update.outputs.current_build }}
      commit: ${{ needs.update.outputs.commit }}
